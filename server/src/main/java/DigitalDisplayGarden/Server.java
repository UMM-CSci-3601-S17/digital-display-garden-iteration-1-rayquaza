package DigitalDisplayGarden;

import DigitalDisplayGarden.plant.PlantController;
import spark.utils.IOUtils;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import static spark.Spark.*;


public class Server {
    public static void main(String[] args) throws IOException {

        PlantController plantController = new PlantController("test");
        // This users looks in the folder `public` for the static web artifacts,
        // which includes all the HTML, CSS, and JS files generated by the Angular
        // build. This `public` directory _must_ be somwhere in the classpath;
        // a problem which is resolved in `server/build.gradle`.
        staticFiles.location("/public");


        options("/*", (request, response) -> {

            String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
            if (accessControlRequestHeaders != null) {
                response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
            }

            String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
            if (accessControlRequestMethod != null) {
                response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
            }
 
            return "OK";
        });

        before((request, response) -> response.header("Access-Control-Allow-Origin", "*"));

        // Simple example route
        get("/hello", (req, res) -> "Hello World");

        // Redirects for the "home" page
        redirect.get("", "/");
//        redirect.get("/", "http://localhost:9000");

        get("/", (req, res) -> {
            InputStream stream = new FileInputStream("/home/schr1230/iteration-1-demo/server/lib/client/public/index.html");
            return IOUtils.toString(stream);
        });
        // Get specific plant
        get("api/plant/:id", (req, res) -> {
            res.type("application/json");
            String id = req.params("id");
            return plantController.getPlant(id);
        });

        // Like a specific plant
        // todo Should this be POST or PUT or something?
        get("api/plant/:id/like", (req, res) -> {
            res.type("application/json");
            String id = req.params("id");
            return plantController.incrementMetadata(id, "likes");
        });

        // Dislike a specific plant
        // todo Should this be POST or PUT or something?
        get("api/plant/:id/dislike", (req, res) -> {
            res.type("application/json");
            String id = req.params("id");
            return plantController.incrementMetadata(id, "dislikes");
        });

        // Posting a comment
        post("api/plant/leaveComment", (req, res) -> {
            res.type("application/json");
            return plantController.storePlantComment(req.body());
        });

        get("/*", ((request, response) -> {
            try {
                InputStream stream = new FileInputStream("/home/schr1230/iteration-1-demo/server/lib/client/public/index.html");
//            return IOUtils.toString(Spark.class.getResourceAsStream("index.html"));
                return IOUtils.toString(stream);
            } catch (Exception e) {
                e.printStackTrace();
                throw e;
            }
        }));

        // Handle "404" file not found requests:
        notFound((req, res) -> {
            res.type("text");
            res.status(404);
            return "Sorry, we couldn't find that!";
        });

    }

}
